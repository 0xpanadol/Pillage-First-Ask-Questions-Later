import { QueryClient } from '@tanstack/react-query';
import { achievementsCacheKey } from 'hooks/game/use-achievements';
import { banksCacheKey } from 'hooks/game/use-bank';
import { currentVillageCacheKey } from 'hooks/game/use-current-village';
import { effectsCacheKey } from 'hooks/game/use-effects';
import { eventsCacheKey } from 'hooks/game/use-events';
import { heroCacheKey } from 'hooks/game/use-hero';
import { mapCacheKey } from 'hooks/game/use-map';
import { questsCacheKey } from 'hooks/game/use-quests';
import { reportsCacheKey } from 'hooks/game/use-reports';
import { researchLevelsCacheKey } from 'hooks/game/use-research-levels';
import { villagesCacheKey } from 'hooks/game/use-villages';
import { currentServerCacheKey } from 'hooks/game/use-current-server';
import { Achievement } from 'interfaces/models/game/achievement';
import { Bank } from 'interfaces/models/game/bank';
import { Village } from 'interfaces/models/game/village';
import { Effect } from 'interfaces/models/game/effect';
import { Hero } from 'interfaces/models/game/hero';
import { Tile } from 'interfaces/models/game/tile';
import { Quest } from 'interfaces/models/game/quest';
import { ResearchLevel } from 'interfaces/models/game/research-level';
import { Server } from 'interfaces/models/game/server';
import { GameEvent } from 'interfaces/models/events/game-event';
import { Report } from 'interfaces/models/game/report';
import { serverMock } from 'mocks/models/game/server-mock';
import { bankMock } from 'mocks/game/bank-mock';
import { Player } from 'interfaces/models/game/player';
import { playersCacheKey } from 'hooks/game/use-players';
import { Reputation } from 'interfaces/models/game/reputation';
import { reputationsCacheKey } from 'hooks/game/use-reputations';
import { mapFiltersCacheKey } from 'hooks/game/use-map-filters';
import { MapFilters } from 'interfaces/models/game/map-filters';
import { mapFiltersMock } from 'mocks/game/map-filters-mock';
import { heroMock } from 'mocks/game/hero-mock';
import { villageMock } from 'mocks/game/village/village-mock';

const { id: serverId, slug } = serverMock;

export const gameEnvironment = new QueryClient();

gameEnvironment.setQueryData<Server>([currentServerCacheKey, slug], serverMock);
gameEnvironment.setQueryData<Achievement[]>([achievementsCacheKey, serverId], []);
gameEnvironment.setQueryData<Village>([currentVillageCacheKey, serverId], villageMock);
gameEnvironment.setQueryData<Report[]>([reportsCacheKey, serverId], []);
gameEnvironment.setQueryData<Effect[]>([effectsCacheKey, serverId], []);
gameEnvironment.setQueryData<Quest[]>([questsCacheKey, serverId], []);
gameEnvironment.setQueryData<ResearchLevel[]>([researchLevelsCacheKey, serverId], []);
gameEnvironment.setQueryData<Hero>([heroCacheKey, serverId], heroMock);
gameEnvironment.setQueryData<Tile[]>([mapCacheKey, serverId], []);
gameEnvironment.setQueryData<Bank>([banksCacheKey, serverId], bankMock);
gameEnvironment.setQueryData<GameEvent[]>([eventsCacheKey, serverId], []);
gameEnvironment.setQueryData<Village[]>([villagesCacheKey, serverId], []);
gameEnvironment.setQueryData<Player[]>([playersCacheKey, serverId], []);
gameEnvironment.setQueryData<Reputation[]>([reputationsCacheKey, serverId], []);
gameEnvironment.setQueryData<MapFilters>([mapFiltersCacheKey, serverId], mapFiltersMock);
